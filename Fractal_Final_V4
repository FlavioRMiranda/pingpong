let Controle_Vento = 0;
let mPI = 3.14;

let anglo = 0;
let angloMIN = mPI / 6;
let angloMAX = mPI / 3;

let tamMIM = 150;
let tamMAX = 80;

let t = 0.02;
let retração = true;

let gotas = [];
let quantidade = 150;

let Som;

let fimDaChuva = false;
let alturaSol;
let tempoParaSol = 1200; // Frames (~13s)
let passaroTocou = false;
let SomPassaro; 
// Intensidade do vento ao longo do tempo
let vento = 0;

function preload() {
  som_Chuva = loadSound('chuva.mp3');
  SomPassaro = loadSound('passaros.mp3');
}

function setup() {
  createCanvas(windowWidth, windowHeight);
  for (let i = 0; i < quantidade; i++) {
    gotas[i] = [random(width), random(height), random(1, 5)];
  }
  alturaSol = height + 100; // Sol começa fora da tela
}

function draw() {
  // Transição do fundo: escuro → claro
  if (!fimDaChuva) {
    background(0, 100);
  } else {
    let bg = map(alturaSol, height + 100, height / 2, 0, 255);
    background(135, 206, 250, constrain(bg, 100, 255));
  }

  // Controle do tempo para iniciar a transição solar
  if (frameCount > tempoParaSol && !fimDaChuva) {
    fimDaChuva = true;
    retração = false;
    if (som_Chuva && som_Chuva.isPlaying()) {
      som_Chuva.setVolume(0, 5); // fade-out suave
    }
  }

  // Controle do crescimento/retração da árvore
  if (retração && t > 0) {
    t -= 0.005;
  } else if (!retração && t < 1) {
    t += 0.002; // Expansão suave
  }

  // Atualiza ângulo dos galhos e vento apenas durante a chuva
  let forca_vento = 0.3;
  vento = (!fimDaChuva) ? sin(Controle_Vento) * forca_vento : 0;
  anglo = lerp(angloMIN, angloMAX, t) + vento;
  if (!fimDaChuva) Controle_Vento += 0.003;

  // Corrige a interpolação do tamanho do tronco (de menor para maior)
  let Comp_tronco = lerp(tamMAX, tamMIM, t);

  // Desenha e atualiza as gotas de chuva (se ainda estiver chovendo)
  if (!fimDaChuva) {
    for (let i = 0; i < quantidade; i++) {
      gotas[i][0] += Controle_Vento * 0.9;
      let esp = map(gotas[i][2], 1, 8, 0.5, 1.0);
      strokeWeight(esp);
      stroke(255);
      let tam = map(gotas[i][2], 1, 5, 4, 12);
      line(gotas[i][0], gotas[i][1], gotas[i][0], gotas[i][1] + tam);

      let vel = map(gotas[i][2], 1, 5, 3, 10);
      gotas[i][1] += vel;

      if (gotas[i][1] > height) {
        gotas[i][0] = random(width);
        gotas[i][1] = 0;
      } else if (gotas[i][0] > width) {
        gotas[i][0] = random(height);
        gotas[i][0] = 0;
      }
    }
  }

  // Desenha a árvore a partir do centro inferior da tela
  push();
  translate(width / 2, height);
  branch(Comp_tronco);
  pop();

  // Desenha o sol subindo no céu após a chuva
  if (fimDaChuva) {
    noStroke();
    fill(255, 204, 0);
    alturaSol = max(height / 2, alturaSol - 1); // sobe até o meio da tela
    ellipse(width - 100, alturaSol, 100, 100); // sol à direita
     if (!passaroTocou && alturaSol <= height / 2) {
    if (SomPassaro && !SomPassaro.isPlaying()) {
      SomPassaro.play();
      passaroTocou = true;
    }
     }
  }
}

function branch(len) {
  let sw = map(len, 4, tamMIM, 0.5, 8);
  strokeWeight(sw);

  if (len <= 3) {
    stroke(205, 0, 132);
  } else if (len <= 10) {
    stroke(0, 255, 0);
  } else {
    stroke(66, 38, 0);
  }

  line(0, 0, 0, -len);
  translate(0, -len);

  if (len > 4) {
    push();
    rotate(anglo);
    branch(len * 0.60);
    pop();

    push();
    rotate(-anglo);
    branch(len * 0.67);
    pop();
  }
}

function mousePressed() {
  if (som_Chuva && !som_Chuva.isPlaying()) {
    som_Chuva.loop();
    som_Chuva.setVolume(1);
  }
  if (SomPassaro && SomPassaro.isLoaded() && getAudioContext().state !== 'running') {
    userStartAudio();  // Libera o áudio no navegador
  }
}
