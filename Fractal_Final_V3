// üå¨Ô∏è Controle da oscila√ß√£o do vento (usado como √¢ngulo de perturba√ß√£o nos galhos)
let Controle_Vento = 0;

// Aproxima√ß√£o de PI (usada para √¢ngulos)
let mPI = 3.14;

// √Çngulo base da bifurca√ß√£o dos galhos da √°rvore (din√¢mico com vento e retra√ß√£o)
let anglo = 0;

// √Çngulos m√≠nimo e m√°ximo dos galhos (controla a abertura/fechamento da √°rvore)
let angloMIN = mPI / 6;   // Galhos mais fechados (retra√≠do)
let angloMAX = mPI / 3;   // Galhos mais abertos (expandido)

// Tamanhos m√≠nimo e m√°ximo do tronco principal (durante transi√ß√£o)
let tamMIM = 150;  // Tronco final (curto)
let tamMAX = 80;   // Tronco inicial (longo)

// Tempo de transi√ß√£o da retra√ß√£o (vai de 1 a 0)
let t = 0.02;

// Flag que indica se a √°rvore est√° retraindo
let retra√ß√£o = true;

// üåßÔ∏è Vetor que armazena as gotas de chuva
let gotas = [];
let quantidade = 150;  // N√∫mero total de gotas simuladas

// üîä √Åudio de fundo da chuva
let Som;

function preload() {
  // Pr√©-carrega o som de chuva (necess√°rio antes do setup)
  Som = loadSound('chuva.mp3');
}

function setup() {
  // Cria o canvas com a largura e altura da janela
  createCanvas(windowWidth, windowHeight);

  // Inicializa as gotas com posi√ß√µes (x, y) e velocidades aleat√≥rias
  for (let i = 0; i < quantidade; i++) {
    gotas[i] = [random(width), random(height), random(1, 5)];
  }
}

function draw() {
  // Fundo escuro com leve transpar√™ncia (para efeito de trilha de movimento)
  background(0, 100);

  // Diminui a vari√°vel de tempo 't' enquanto estiver retraindo
  if (retra√ß√£o && t > 0) {
    t -= 0.005;  // Controla a velocidade da retra√ß√£o
  }

  // üå¨Ô∏è C√°lculo da for√ßa do vento oscilante (efeito senoidal)
  let forca_vento = 0.3;
  let vento = sin(Controle_Vento) * forca_vento;

  // Atualiza o √¢ngulo dos galhos com interpola√ß√£o e influ√™ncia do vento
  anglo = lerp(angloMIN, angloMAX, t) + vento;

  // Atualiza o controle de vento (incremento cont√≠nuo)
  Controle_Vento += 0.003;

  // Atualiza o tamanho do tronco com base na retra√ß√£o
  let Comp_tronco = lerp(tamMIM, tamMAX, t);

  // üåßÔ∏è Atualiza e desenha todas as gotas de chuva
  for (let i = 0; i < quantidade; i++) {
    // Efeito lateral do vento nas gotas
    gotas[i][0] += Controle_Vento * 0.9;

    // Espessura da gota proporcional √† velocidade
    let esp = map(gotas[i][2], 1, 8, 0.5, 1.0);
    strokeWeight(esp);
    stroke(255); // Cor branca

    // Comprimento da linha que representa a gota
    let tam = map(gotas[i][2], 1, 5, 4, 12);

    // Desenha a gota como uma linha vertical
    line(gotas[i][0], gotas[i][1], gotas[i][0], gotas[i][1] + tam);

    // Atualiza a posi√ß√£o vertical da gota
    let vel = map(gotas[i][2], 1, 5, 3, 10);
    gotas[i][1] += vel;

    // Reposiciona a gota ao topo quando sair da tela inferior
    if (gotas[i][1] > height) {
      gotas[i][0] = random(width);
      gotas[i][1] = 0;
    } else if (gotas[i][0] > width) {
      // Reposiciona lateralmente ao sair pela direita (em caso de vento forte)
      gotas[i][0] = random(height);
      gotas[i][0] = 0;
    }
  }

  // üå≥ Desenha a √°rvore no centro inferior da tela
  push();
  translate(width / 2, height); // Origem no "solo"
  branch(Comp_tronco);          // Chama a recurs√£o para desenhar os galhos
  pop();
}

// üåø Fun√ß√£o recursiva que desenha os galhos da √°rvore
function branch(len) {
  // Espessura do galho baseada no seu comprimento
  let sw = map(len, 4, tamMIM, 0.5, 8);
  strokeWeight(sw);

  // Define a cor do galho dependendo do tamanho (folha, flor, tronco)
  if (len <= 3) {
    stroke(205, 0, 132);  // Rosa (flor)
  } else if (len <= 10) {
    stroke(0, 255, 0);    // Verde (folha)
  } else {
    stroke(66, 38, 0);    // Marrom (tronco)
  }

  // Desenha o galho atual
  line(0, 0, 0, -len);
  translate(0, -len); // Move a origem para o topo do galho atual

  // Recurs√£o para galhos menores
  if (len > 4) {
    // Galho da direita
    push();
    rotate(anglo);
    branch(len * 0.67);  // Reduz o comprimento
    pop();

    // Galho da esquerda
    push();
    rotate(-anglo);
    branch(len * 0.67);
    pop();
  }
}

// üîä Inicia o som da chuva ao clicar com o mouse
function mousePressed() {
  if (Som && !Som.isPlaying()) {
    Som.loop();  // Reproduz continuamente
  }
}
