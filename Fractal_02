// Define uma aproximação de PI (poderia ser substituído por PI nativo do p5.js)
let mPI = 3.14;

// Ângulo de inclinação dos galhos da árvore, controlado ao longo do tempo
let angle = 0;

// Ângulo mínimo e máximo dos galhos (para retração da árvore)
let baseAngle = mPI / 6;   // Ângulo final: galhos mais fechados (retraído)
let maxAngle = mPI / 3;    // Ângulo inicial: galhos mais abertos (expandido)

// Comprimento mínimo e máximo do tronco principal
let baseLen = 150;         // Tronco final (mais curto)
let maxLen = 80;           // Tronco inicial (mais longo)

// Variável de tempo para controlar a transição da retração (t varia de 1 para 0)
let t = 1;

// Flag para indicar se a árvore está retraindo
let retracting = true;

// Vetor que armazenará as gotas de chuva
let gotas = [];
let quantidade = 100;  // Número total de gotas de chuva

// Variável para armazenar o som da chuva
let sound;

function preload() {
  // Carrega o som da chuva antes do setup
  sound = loadSound('chuva.mp3');
}

function setup() {
  createCanvas(600, 600); // Cria o canvas principal

  // Inicializa cada gota com posição e velocidade aleatórias
  for (let i = 0; i < quantidade; i++) {
    gotas[i] = [random(width), random(height), random(1, 5)];
  }
}

function draw() {
  background(0, 100); // Fundo preto com leve transparência (efeito de rastro)

  // Diminui gradualmente o tempo t para controlar a retração da árvore
  if (retracting && t > 0) {
    t -= 0.005; // Velocidade da retração
  }

  // Atualiza o ângulo dos galhos e o tamanho do tronco com base em t
  angle = lerp(baseAngle, maxAngle, t);       // Interpola entre ângulo fechado e aberto
  let trunkLen = lerp(baseLen, maxLen, t);    // Interpola entre tronco curto e longo

  // Desenha e atualiza todas as gotas de chuva
  for (let i = 0; i < quantidade; i++) {
    let esp = map(gotas[i][2], 1, 5, 0.5, 2.5);   // Espessura da linha com base na "velocidade"
    strokeWeight(esp);
    stroke(255); // Cor branca
    let tam = map(gotas[i][2], 1, 5, 4, 12);      // Comprimento da gota

    // Desenha a gota como uma linha vertical
    line(gotas[i][0], gotas[i][1], gotas[i][0], gotas[i][1] + tam);

    let vel = map(gotas[i][2], 1, 5, 3, 10);      // Velocidade da gota
    gotas[i][1] += vel; // Atualiza a posição Y

    // Se a gota sair da tela, reposiciona no topo com X aleatório
    if (gotas[i][1] > height) {
      gotas[i][0] = random(width);
      gotas[i][1] = 0;
    }
  }

  // Desenha a árvore a partir da base inferior central da tela
  push();
  translate(width / 2, height);
  branch(trunkLen); // Chama a função recursiva com o tronco atual
  pop();
}

function branch(len) {
  // Define a cor dos galhos terminais (verdes) e principais (brancos)
  if (len <= 4) {
    stroke(0, 255, 0); // Verde para galhos finos (folhas)
  } else {
    stroke(255);       // Branco para galhos principais
  }

  // Desenha o galho atual
  line(0, 0, 0, -len);
  translate(0, -len); // Move-se para o topo do galho para continuar o desenho

  // Se o galho ainda for grande o suficiente, desenha os ramos recursivamente
  if (len > 4) {
    push();
    rotate(angle); // Rotaciona para a direita
    branch(len * 0.67); // Desenha ramo menor
    pop();

    push();
    rotate(-angle); // Rotaciona para a esquerda
    branch(len * 0.67);
    pop();
  }
}

// Inicia o som da chuva ao clicar com o mouse
function mousePressed() {
  if (sound && !sound.isPlaying()) {
    sound.loop(); // Toca o som em loop
  }
}
